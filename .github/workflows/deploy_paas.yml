name: Pipeline Set Up AKS

run-name: ${{ github.actor }} is launching the AKS set up

on:
  push:
    branches: [terraform]
    paths:
      - terraform/paas/outputs.tf

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  cr-plan:
    name: Plan Paas
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Paas plan
        run: |
          terraform --version
          cd ${{ vars.TF_PAAS_ROOT }}
          terraform init -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ vars.STORAGE_CONTAINER_NAME }}"
          terraform validate
          terraform plan -var-file="../env/$GITHUB_REF_NAME.tfvars" -out tfplan

      - name: Upload artefact of the tfplan file
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_PAAS_ROOT }}/tfplan

  cr-apply:
    needs: cr-plan
    name: Apply paas
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Download the artefact of the tfplan file
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_PAAS_ROOT }}/

      - name: Terraform paas apply
        run: |
          terraform --version
          cd ${{ vars.TF_PAAS_ROOT }}
          terraform init -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ vars.STORAGE_CONTAINER_NAME }}"
          terraform validate
          terraform apply -input=false -auto-approve tfplan

      - name: Get kube config
        run: |
          cd ${{ vars.TF_PAAS_ROOT }}
          terraform output -raw kube_config | base64 > config

      - name: Upload kube config as artifact
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig
          path: ${{ vars.TF_PAAS_ROOT }}/config
