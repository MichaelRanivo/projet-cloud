name: Pipeline deployment Backend Infra

run-name: ${{ github.actor }} is launching the deployment of the tf backend infra

on:
  push:
    branches: [terraform]
    paths: # if change on the back folder this workflow will run
      - terraform/back/**

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  tf-backend-infra-plan:
    name: Plan backend TF infra
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2

      - name: Terraform backend infra plan
        run: |
          az account show
          terraform --version
          cd ${{ vars.TF_INFRA_ROOT }}
          terraform init
          terraform validate
          terraform plan -var-file="../../env/$GITHUB_REF_NAME.tfvars" -out tfplan

      - name: Upload artefact of the tfplan file
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_INFRA_ROOT }}/tfplan

  tf-backend-infra-apply:
    needs: tf-backend-infra-plan
    name: Apply backend TF infra
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Download the artefact of the tfplan file
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_INFRA_ROOT }}

      - name: Terraform backend infra apply
        run: |
          terraform --version
          cd ${{ vars.TF_INFRA_ROOT }}
          terraform init
          terraform validate
          terraform apply -input=false -auto-approve tfplan

      - name: Update resource group name Variables
        run: |
          cd ${{ vars.TF_INFRA_ROOT }}
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN_PERSO }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/actions/variables/RESOURCE_GROUP_NAME \
            -d "{\"name\":\"RESOURCE_GROUP_NAME\",\"value\":\"$(terraform output -raw resource_group_name)\"}"

      - name: Update storage account name Variables
        run: |
          cd ${{ vars.TF_INFRA_ROOT }}
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN_PERSO }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/actions/variables/STORAGE_ACCOUNT_NAME \
            -d "{\"name\":\"STORAGE_ACCOUNT_NAME\",\"value\":\"$(terraform output -raw storage_account_name)\"}"

      - name: Update storage container name Variables
        run: |
          cd ${{ vars.TF_INFRA_ROOT }}
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN_PERSO }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/actions/variables/STORAGE_CONTAINER_NAME \
            -d "{\"name\":\"STORAGE_CONTAINER_NAME\",\"value\":\"$(terraform output -raw storage_container_name)\"}"

      - name: Sleep for 10 seconds
        run: sleep 10s
        shell: bash

  terraform-backend-plan:
    name: Plan backend TF
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2

      - name: Configuration of terraform backend state
        run: |
          echo "ARM_ACCESS_KEY=$(az storage account keys list --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --query '[0].value' -o tsv)" >> $GITHUB_ENV

      - name: Terraform backend plan
        run: |
          terraform --version
          cd ${{ vars.TF_ROOT }}
          terraform init -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ vars.STORAGE_CONTAINER_NAME }}"
          terraform validate
          terraform plan -var-file="../env/$GITHUB_REF_NAME.tfvars" -out tfplan

      - name: Upload artefact of the tfplan file
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_ROOT }}/tfplan

  terraform-backend-apply:
    needs: terraform-backend-plan
    name: Apply backend TF
    runs-on: self-hosted
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Use Terraform Action
        uses: hashicorp/setup-terraform@v2

      - name: Download the artefact of the tfplan file
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ vars.TF_ROOT }}/

      - name: Terraform backend apply
        run: |
          terraform --version
          cd ${{ vars.TF_ROOT }}
          terraform init -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ vars.STORAGE_CONTAINER_NAME }}"
          terraform validate
          terraform apply -input=false -auto-approve tfplan
