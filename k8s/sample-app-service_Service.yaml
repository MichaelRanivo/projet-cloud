kind: Service
apiVersion: v1
metadata:
  name: sample-app-service
  namespace: default-1699089617700
  uid: 887c4265-0ad1-43a5-a56b-05b522ca4cac
  resourceVersion: '8831'
  creationTimestamp: '2023-11-04T09:20:26Z'
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  managedFields:
    - manager: Mozilla
      operation: Update
      apiVersion: v1
      time: '2023-11-04T09:20:26Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:allocateLoadBalancerNodePorts: {}
          f:externalTrafficPolicy: {}
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
    - manager: cloud-controller-manager
      operation: Update
      apiVersion: v1
      time: '2023-11-04T09:20:33Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:finalizers:
            .: {}
            v:"service.kubernetes.io/load-balancer-cleanup": {}
        f:status:
          f:loadBalancer:
            f:ingress: {}
      subresource: status
spec:
  ports:
    - name: port80
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 32276
  selector:
    app: sample-app
  clusterIP: 10.0.166.0
  clusterIPs:
    - 10.0.166.0
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  allocateLoadBalancerNodePorts: true
  internalTrafficPolicy: Cluster
status:
  loadBalancer:
    ingress:
      - ip: 20.105.47.250
